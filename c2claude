#!/usr/bin/env bash
# c2claude - Claude Code wrapper with account switching via c2switcher
#
# Usage:
#   c2claude [options] [claude arguments...]
#
# Options:
#   -1, -2, -3       Switch to account by index (0, 1, 2)
#   -a, --account N  Switch to account N (by index, nickname, or email)
#   -o, --optimal    Use the optimal account (lowest usage)
#   -c, --cycle      Cycle to the next account
#   (no option)      Use current account with load balancing, or optimal if none set
#
# Examples:
#   c2claude -1            # Switch to account 0 and run claude
#   c2claude -2 -p hi      # Switch to account 1 and run claude -p hi
#   c2claude --optimal     # Use optimal account with load balancing
#   c2claude --cycle       # Cycle to next account
#   c2claude               # Use load-balanced account selection

set -e

selected_account=""
use_optimal=true
cycle=false
remaining_args=()

# Generate unique session ID
if command -v uuidgen &> /dev/null; then
    SESSION_ID=$(uuidgen)
else
    # Fallback: use random number + timestamp if uuidgen not available
    SESSION_ID="session-$$-$(date +%s)-$RANDOM"
fi

# Get parent shell PID for tracking
PARENT_PID=$PPID

# Cleanup function to end session
cleanup_session() {
    c2switcher end-session --session-id "$SESSION_ID" 2>/dev/null &
}

# Register cleanup to run on exit (success or failure)
trap cleanup_session EXIT INT TERM

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -1)
            selected_account="0"
            use_optimal=false
            shift
            ;;
        -2)
            selected_account="1"
            use_optimal=false
            shift
            ;;
        -3)
            selected_account="2"
            use_optimal=false
            shift
            ;;
        --account|-a)
            selected_account="$2"
            use_optimal=false
            shift 2
            ;;
        --optimal|-o)
            use_optimal=true
            shift
            ;;
        --cycle|-c)
            cycle=true
            use_optimal=false
            shift
            ;;
        *)
            remaining_args+=("$1")
            shift
            ;;
    esac
done


export DISABLE_BUG_COMMAND=1
export DISABLE_COST_WARNINGS=1
export DISABLE_TELEMETRY=1

# Register session start
c2switcher start-session \
    --session-id "$SESSION_ID" \
    --pid $$ \
    --parent-pid "$PARENT_PID" \
    --cwd "$(pwd)" \
    2>/dev/null || true

# Get OAuth token via environment variable (no file writes!)
if [[ "$use_optimal" == true ]]; then
    # Use optimal account with load balancing - get token only
    # Info goes to stderr (visible), token goes to stdout (captured)
    CLAUDE_CODE_OAUTH_TOKEN=$(c2switcher optimal --session-id "$SESSION_ID" --token-only)
elif [[ -n "$selected_account" ]]; then
    # Switch to specific account - get token only (no session tracking)
    # Info goes to stderr (visible), token goes to stdout (captured)
    CLAUDE_CODE_OAUTH_TOKEN=$(c2switcher switch "$selected_account" --token-only)
elif [[ "$cycle" == true ]]; then
    # Cycle through accounts - still writes credentials file (legacy behavior)
    c2switcher cycle
fi

# Export token if we got one
if [[ -n "$CLAUDE_CODE_OAUTH_TOKEN" ]]; then
    export CLAUDE_CODE_OAUTH_TOKEN
fi

# Run claude with remaining arguments (don't use exec - we need to cleanup after)
claude "${remaining_args[@]}"
EXIT_CODE=$?

# Cleanup happens via trap automatically (backgrounded)

exit $EXIT_CODE
